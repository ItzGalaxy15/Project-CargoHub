name: CI-build-&-test

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - 'main'

env:
  IMAGE_NAME: CargoHub
  OWNER: "${{ github.repository_owner }}"
  DOTNET_INSTALL_DIR: "./.dotnet"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
  
      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
        
      - name: Add .NET to PATH
        run: echo "${{ runner.temp }}/dotnet" >> $GITHUB_PATH
  
      - name: Debug File Structure
        run: ls -R .
  
      - name: Build .NET project
        run: dotnet build --configuration Release ../Project-CargoHub/CargoHub/CargoHubC#.csproj
  
      - name: Test .NET project
        run: dotnet test --no-build --verbosity normal --configuration Release ../Project-CargoHub/CargoHub/CargoHubC#.csproj

  testV1:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
  
      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
  
      - name: Add .NET to PATH
        run: echo "${{ runner.temp }}/dotnet" >> $GITHUB_PATH
  
      - name: Debug File Structure
        run: ls -R .
  
      - name: Build .NET Project
        run: dotnet build --configuration Release ../Project-CargoHub/CargoHub/CargoHubC#.csproj
  
      - name: Run .NET Application
        run: |
          dotnet run --project ../Project-CargoHub/CargoHub/CargoHubC#.csproj &
          echo "Waiting for the .NET app to start..."
          for i in {1..10}; do
            curl -f http://localhost:3000 && break || sleep 5;
          done
          curl -v http://localhost:3000

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11.9'
  
      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install httpx pytest pytest-cov
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run Tests with Coverage
        run: |
          cd "Tests/V1/Integration Tests"
          pytest --cov=. --cov-report=term-missing -v -s
          coverage report --format=markdown >> $GITHUB_STEP_SUMMARY
          coverage report --fail-under=80
        continue-on-error: true

      - name: Send Discord Notification on Success
        if: success()
        run: |
          curl -X POST -H "Content-Type: application/json" \
          -d '{"content":"✅ Coverage passed for testV1!", "embeds": [{"image": {"url": "https://media.giphy.com/media/c3Ijgf3YrfqtVH21cY/giphy.gif?cid=ecf05e47pm7p435qa548h2dm7b4mrsk3vgew4s8zu4j2k3fk&ep=v1_gifs_search&rid=giphy.gif&ct=g"}}]}' \
          ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: Send Discord Notification on Failure
        if: failure()
        run: |
          curl -X POST -H "Content-Type: application/json" \
          -d '{"content":"❌ Coverage failed for testV1. Please check the report.", "embeds": [{"image": {"url": "https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExNzByYm1qcnZlOTJlMWM3YXdkZXJ0NWR2MnEzd3I2aXFia2FvMzBhNSZlcD12MV9naWZzX3NlYXJjaCZjdD1n/D7knpKzFbgDPBmdrVM/giphy.gif"}}]}' \
          ${{ secrets.DISCORD_WEBHOOK_URL }}

  testV2:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
  
      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
  
      - name: Add .NET to PATH
        run: echo "${{ runner.temp }}/dotnet" >> $GITHUB_PATH
  
      - name: Debug File Structure
        run: ls -R .
  
      - name: Build .NET Project
        run: dotnet build --configuration Release ../Project-CargoHub/CargoHub/CargoHubC#.csproj
  
      - name: Run .NET Application
        run: |
          dotnet run --project ../Project-CargoHub/CargoHub/CargoHubC#.csproj &
          echo "Waiting for the .NET app to start..."
          for i in {1..10}; do
            curl -f http://localhost:3000 && break || sleep 5;
          done
          curl -v http://localhost:3000

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11.9'
  
      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install httpx pytest pytest-cov
          if [ -f requirements.txt]; then pip install -r requirements.txt; fi

      - name: Run Tests with Coverage
        run: |
          cd "Tests/V2/Integration Tests"
          pytest --cov=. --cov-report=term-missing -v -s
          coverage report --format=markdown >> $GITHUB_STEP_SUMMARY
          coverage report --fail-under=80
        continue-on-error: true

      - name: Send Discord Notification on Success
        if: success()
        run: |
          curl -X POST -H "Content-Type: application/json" \
          -d '{"content":"✅ Coverage passed for testV2!", "embeds": [{"image": {"url": "https://media.giphy.com/media/c3Ijgf3YrfqtVH21cY/giphy.gif?cid=ecf05e47pm7p435qa548h2dm7b4mrsk3vgew4s8zu4j2k3fk&ep=v1_gifs_search&rid=giphy.gif&ct=g"}}]}' \
          ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: Send Discord Notification on Failure
        if: failure()
        run: |
          curl -X POST -H "Content-Type: application/json" \
          -d '{"content":"❌ Coverage failed for testV2. Please check the report.", "embeds": [{"image": {"url": "https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExNzByYm1qcnZlOTJlMWM3YXdkZXJ0NWR2MnEzd3I2aXFia2FvMzBhNSZlcD12MV9naWZzX3NlYXJjaCZjdD1n/D7knpKzFbgDPBmdrVM/giphy.gif"}}]}' \
          ${{ secrets.DISCORD_WEBHOOK_URL }}
