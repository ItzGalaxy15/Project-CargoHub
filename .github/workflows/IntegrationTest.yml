name: CI-build-&-test

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - 'main'

env:
  IMAGE_NAME: CargoHub
  OWNER: "${{ github.repository_owner }}"
  DOTNET_INSTALL_DIR: "./.dotnet"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
  
      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
        
      - name: Add .NET to PATH
        run: echo "${{ runner.temp }}/dotnet" >> $GITHUB_PATH
  
      - name: Debug File Structure
        run: ls -R .
  
      - name: Build .NET project
        run: dotnet build --configuration Release ../Project-CargoHub/CargoHub/CargoHubC#.csproj
  
      - name: Test .NET project
        run: dotnet test --no-build --verbosity normal --configuration Release ../Project-CargoHub/CargoHub/CargoHubC#.csproj
        

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
  
      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'
  
      - name: Add .NET to PATH
        run: echo "${{ runner.temp }}/dotnet" >> $GITHUB_PATH
  
      - name: Debug File Structure
        run: ls -R .
  
      - name: Build .NET Project
        run: dotnet build --configuration Release ../Project-CargoHub/CargoHub/CargoHubC#.csproj
  
      - name: Run .NET Application
        run: |
          dotnet run --project ../Project-CargoHub/CargoHub/CargoHubC#.csproj &
          echo "Waiting for the .NET app to start..."
          for i in {1..10}; do
            curl -f http://localhost:3000 && break || sleep 5;
          done
          curl -v http://localhost:3000
  
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11.9'
  
      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install httpx pytest pytest-cov
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: integration
        run: coverage run -m pytest 
  
      - name: Run Tests with Coverage
        run: |
          coverage report --format=markdown >> $GITHUB_STEP_SUMMARY
          coverage report --fail-under=90
          pytest --cov=. --cov-report=term-missing -v -s
      - name: coverage report
        uses: actions/upload-artifact@v4
        with:
          path: coverage.xml
        if: ${{ failure() }}
